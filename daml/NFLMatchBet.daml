module NFLMatchBet where

--import BetAccount
import NFLSeason 

data NFLBetStatus = Open | Placed | Settled
  deriving (Eq, Show)

data NFLBetType = NFLBetType 
  with
    issuer: Party
    betType:Text
  deriving (Eq, Show)
data Winner = Winner with
    user: Party
    amount: Decimal
      deriving (Eq, Show)


data UserBet = UserBet with --represents a user bet
  user: Party
  betScore: Int
  betAmount: Decimal
  oversunders: Text
  matchNo:Int
    deriving (Show, Eq)
data MatchType = MatchType with --represents a user bet
  matchNo:Int
    deriving (Show, Eq)
    
template NFLMatchBet
  with
    issuer: Party
    match:MatchType
    userBets: [UserBet] --represents each user and the betscore for that match
    odds: Decimal
    betStatus: NFLBetStatus
    betType:NFLBetType
    users:[Party]

  where
    signatory issuer
    observer users

    key (betType, match.matchNo): (NFLBetType, Int) 
    maintainer key._1.issuer 
    choice UpdateBetStatus: ContractId NFLMatchBet
      with
        newBetStatus: NFLBetStatus
      controller issuer
      do
        assertMsg  "Cannot update to the same status" $ newBetStatus == betStatus
        create this with betStatus = newBetStatus

    choice UpdateBetOdds: ContractId NFLMatchBet --updates with new odds of winning
      with
        newOdds: Decimal
      controller issuer
      do
       -- assert (newOdds /= odds) "Cannot update to the same odds"
        create this with odds = newOdds
    
    choice AddNewUserBet: ContractId NFLMatchBet --updates with new odds of winning
      with
        bet:UserBet
      controller issuer
      do
       -- assert (newOdds /= odds) "Cannot update to the same odds"
        let newUsers=users++[bet.user]
        let newuserBets=userBets++[bet]
         
        create this with users=newUsers,userBets=newuserBets
    
    choice CalculateBetWinnings: [ContractId UserNFLAccount] -- calculates winners and amount to be paid out,Call BetAccount chioce Payout after this
      with
        finalMatchScore: Int --represents the final total  match score
      controller issuer
      do
        assertMsg "Cannot calculate winnings for an ongoing bet" $ betStatus == Settled
         --check if the winning team is the user bet team and score is overs or unders based on bet type
        let calculateWinningAmount userBet = 
              if (userBet.betScore >= finalMatchScore && userBet.oversunders == "Overs") || (userBet.betScore < finalMatchScore && userBet.oversunders == "Unders")
                then userBet.betAmount + (userBet.betAmount * odds)
                else 0.0

        --filter our winners and calculate winning amount
        let winners = [ Winner with user = userBet.user, amount = calculateWinningAmount userBet
                      | userBet <- userBets, calculateWinningAmount userBet > 0.0 ]

        let createAccountForWinner winner = do
            create UserNFLAccount with
             betType = betType
             user = winner.user
             balance = winner.amount
             bets = []
            --return userNFLAccountCid
    
        mapA createAccountForWinner winners


template UserNFLAccount
  with 
    betType: NFLBetType
    user: Party
    bets: [ContractId NFLMatchBet]
    balance: Decimal

  where
    signatory user, betType.issuer

    key (betType, user): (NFLBetType, Party) --key has to have atleast one party
    maintainer key._1.issuer --1-1 relationship b/w asset and account

    choice NFL_InviteNewUser: ContractId UserNFLAccountProposal
      with
        recipient: Party
      
      controller betType.issuer
      do
        create UserNFLAccountProposal with
          account = this
          recipient 

    choice NFL_AddBalance: ContractId UserNFLAccount
      with
        additionalBalance: Decimal
      
      controller betType.issuer
      do
        assertMsg "Additional balance must be positive" $ additionalBalance > 0.0

        create this with
          balance = balance + additionalBalance
    
    choice NFL_AddBet: ContractId UserNFLAccount
      with
        nflBetCid: ContractId NFLMatchBet
        newBalance: Decimal
      
      controller betType.issuer
      do
        create this with
          bets = bets ++ [nflBetCid]
          balance = newBalance


template NFLBetProposal
  with
    bet: UserBet
    user: Party
    betType:NFLBetType
  where 
    signatory user
    observer  betType.issuer

    choice Transfer_Accept: ContractId NFLMatchBet
      controller betType.issuer
      do
        (userNFLAccountCid, userNFLAccount) <- fetchByKey @UserNFLAccount (betType, user)
        (nflMatchBetCid, nflMatchBet) <- fetchByKey @NFLMatchBet (betType, bet.matchNo)
        
        assertMsg "Insufficient balance" $ userNFLAccount.balance >= bet.betAmount
        exercise userNFLAccountCid NFL_AddBet with 
          nflBetCid = nflMatchBetCid
          newBalance = userNFLAccount.balance - bet.betAmount
             
        exercise nflMatchBetCid AddNewUserBet with  --adding new user bet to the central match contract
          bet
       
    
    choice NFLBetProposal_Reject: ()
      controller betType.issuer
      do
        return ()

    choice NFLBetProposal_Cancel: ()
      controller user
      do
        return ()

template UserNFLAccountProposal
  with
    account: UserNFLAccount
    recipient: Party
  
  where
    signatory account.betType.issuer
    observer recipient

    choice UserNFLAccountProposal_Accept: ContractId UserNFLAccount 
      controller recipient
      do
        create account with
          user = recipient

    choice UserNFLAccountProposal_Reject: ()
      controller recipient
      do
        return ()

    choice UserNFLAccountProposal_Cancel: ()
      controller account.betType.issuer
      do
        return ()
