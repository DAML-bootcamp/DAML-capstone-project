module F1Scheduling where

import SchedulingData
import Utilities
import F1UserBetting
import DA.Foldable
import DA.Optional (fromSome)
import DA.List.Total (head)


template Race
  with
    house: Party
    users: [Party]
    trackInfo: TrackInfo
    leaderboard: Leaderboard
    status: Text

  where
    signatory house
    observer users

    ensure leaderboard.isRaceLeaderboard

    choice Race_AddUser: ContractId Race
      with
        user: Party
      controller house
      do
        create this with
          users = users ++ [user]
  
    choice UpdateLeaderboardPosition: ContractId Race
      with
        racerPositions: [RacerPosition]
      controller house
      do
      {-
        Update positions on the leaderboard
      -}
        let 
          betType = F1BetType with issuer = house
          newRacerPositions = map (\position -> 
            if (Prelude.any (\racerPos -> racerPos.racer == position.racer) racerPositions) then do
              let racerPosition = fromSome $ head $ filter (\racerPos -> racerPos.racer == position.racer) racerPositions
              position{position = racerPosition.position}
            else do
              position ) leaderboard.positions
        {-
          For each bet placed by each user:
          - Check if the bet was for a racer whose position changed
          - If so, calculate new bet odds and update
        -}
        forA_ users (\user -> do
          (userAccountCid, userAccount) <- fetchByKey @UserF1Account (betType, user)
          forA_ userAccount.bets (\betCid -> 
            do
              bet <- fetch betCid
              forA_ racerPositions (\position -> do
                  if (Prelude.any (\racerPos -> racerPos.racer == position.racer) racerPositions) then do 
                    exercise betCid F1Bet_UpdateBetOdds with 
                      newOdds = getRacerPositionOdds position.racer position.position
                  else do
                    return betCid
                )
            ))

        create this with
          leaderboard = leaderboard with 
            positions = newRacerPositions
    
    choice UpdateRaceStatus: ContractId Race
      with
        newStatus: Text
      controller house
      do
        assertMsg "Race status must be 'In Progress', 'Cancelled' or 'Finished'" 
          (newStatus == "In Progress" || newStatus == "Finished" || newStatus == "Cancelled")

        let 
          betType = F1BetType with issuer = house
          raceLeader = getRaceLeader leaderboard.positions
        
        -- Find out all outstanding bets for this race and close them out
        forA_ users (\user -> 
          if (newStatus == "Finished") then do
            (userAccountCid, userAccount) <- fetchByKey @UserF1Account (betType, user)
            forA_ userAccount.bets (\betCid -> 
              do
                bet <- fetch betCid
                if (bet.trackInfo == trackInfo && bet.status /= Settled) then do 
                  exercise betCid F1Bet_CloseBet_System with raceWinner = raceLeader.racer
                else do
                  return betCid
              )
          else do
            pure ())

        create this with
          status = newStatus

validateAllRacesFinished: [Race] -> Bool
validateAllRacesFinished races = Prelude.all (\race -> race.status == "Finished") races

template Season
  with
    house: Party
    users: [Party]
    year: Int
    races: [ContractId Race]
    racers: [Racer]
    championshipStandings: Leaderboard
    status: Text

  where
    signatory house
    observer users
  
    ensure not championshipStandings.isRaceLeaderboard

    choice Season_AddUser: ContractId Season
      with
        user: Party
      controller house
      do
        create this with
          users = users ++ [user]

    choice AddRacer: ContractId Season
      with
        newRacer: Racer
      controller house
      do
        assertMsg "Racer already exists" (Prelude.any (\racer -> racer.name == newRacer.name) racers)
        
        create this with
          racers = racers ++ [newRacer]
    
    choice UpdateChampionshipPosition: ContractId Season
      with
        racerPos: RacerPosition
      controller house
      do
        create this with
          championshipStandings = championshipStandings with 
            positions = updateRacerRacePosition racerPos championshipStandings.positions
    
    choice UpdateSeasonStatus: ContractId Season
      with
        newStatus: Text
      controller house
      do
        assertMsg "Race status must be 'In Progress', or 'Finished'" 
          (newStatus == "In Progress" || newStatus == "Finished")

        raceData <- mapA (\raceCid -> fetch raceCid) races

        if (newStatus == "In Progress") then assertMsg "Season cannot be marked 'In Progress' if all races have finished" (not $ validateAllRacesFinished raceData)
        else assertMsg "All race statuses must be marked 'Finished' to finish the season" (validateAllRacesFinished raceData)
        
        create this with
          status = newStatus
