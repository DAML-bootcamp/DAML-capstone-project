module TestBetAccount where
import BetAccount
import Account
import Daml.Script

--boilerplate stuff
data TestParties = TestParties with
    houseParty : Party
    userParty : Party
    bankParty : Party

data TestAccounts = TestAccounts with
    usdAsset : AssetType
    userAAccountCid: ContractId Account

setupTestParties = script do
    houseParty <- allocatePartyWithHint "House" (PartyIdHint "House")
    userParty <- allocatePartyWithHint "UserA" (PartyIdHint "UserA")
    bankParty <- allocatePartyWithHint "BofA" (PartyIdHint "BofA")
    let
        tp = TestParties with
            houseParty
            userParty
            bankParty
    return tp
    
setupTestAccounts = script do
    tp@TestParties{..} <- setupTestParties
    let 
        usdAsset = AssetType with
            symbol = "USD"
            issuer = bankParty
            fungable = True
    userAAccountCid <- submit userParty do
        createCmd Account with
            assetType = usdAsset
            amount = 100.00
            owner = userParty
            observers = []
    let
        ta = TestAccounts with ..
    return (tp, ta)

-- start of test
testSubmitPayment = script do
    -- fix this line of code
    (tp@TestParties{..}, ta@TestAccounts{..}) <- setUpAccounts
    users <- [userParty]
    amount <- 0.0
    house <- houseParty
    userACid <- submitMulti [houseParty, userParty] [] do
        createCmd BetAccounts with
            users
            amount
            house
    submit users._1 do
        exerciseCmd userACid SubmitPayment
            with
                -- need to pull userAccount from ta
                userAccount = ta
                user = users._1
                betAmount = amount

