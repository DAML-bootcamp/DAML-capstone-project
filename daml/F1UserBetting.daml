module F1UserBetting where

import SchedulingData

data F1BetStatus = Open | Placed | Settled
  deriving (Eq, Show)


data F1BetType = F1BetType 
  with
    issuer: Party
  deriving (Eq, Show)


template F1Bet
  with
    issuer: Party
    user: Party
    betType: F1BetType
    racer: Racer
    trackInfo: TrackInfo
    status: F1BetStatus
    odds: Decimal
    amount: Decimal

  where
    signatory issuer
    observer user

    choice F1Bet_UpdateBetStatus: ContractId F1Bet
      with
        newBetStatus: F1BetStatus

      controller issuer
      do
        assertMsg  "Cannot update to the same status" $ newBetStatus == status
        create this with status = newBetStatus
    
    choice F1Bet_UpdateBetOdds: ContractId F1Bet --updates with new odds of winning
      with
        newOdds: Decimal
      controller issuer
      do
       -- assert (newOdds /= odds) "Cannot update to the same odds"
        create this with odds = newOdds
    
    choice F1Bet_CloseBet: ContractId F1Bet
      with
        raceWinner: Racer
      controller user
      do
        assertMsg  "Bet is already closed" $ status /= Settled 
        assertMsg  "Only placed bets may be closed" $ status /= Open 

        (userF1AccountCid, userF1Account) <- fetchByKey @UserF1Account (betType, user)

        let payout = 0

        if (raceWinner == racer) then do
          create userF1Account with
            balance = userF1Account.balance + amount
        else
          create userF1Account

        create this with
            status = Settled
    
    choice F1Bet_CloseBet_System: ContractId F1Bet
      with
        raceWinner: Racer
      controller issuer
      do
        assertMsg  "Bet is already closed" $ status /= Settled 
        assertMsg  "Only placed bets may be closed" $ status /= Open 

        (userF1AccountCid, userF1Account) <- fetchByKey @UserF1Account (betType, user)

        let payout = amount + (amount * (1.0 + odds))
        newBetCid <- create this with
            status = Settled

        if (raceWinner == racer) then do
          create Winnings with
            account = userF1Account
            accountCid = userF1AccountCid
            oldBetCid = self
            newBetCid
            recipient = user
            winnings = payout
        else
          create Winnings with 
            account = userF1Account
            accountCid = userF1AccountCid
            oldBetCid = self
            newBetCid
            recipient = user
            winnings = 0.0

        return newBetCid


template F1BetProposal
  with
    betCid: ContractId F1Bet
    betType: F1BetType
    user: Party

  where 
    signatory betType.issuer
    observer user 

    choice F1BetProposal_Accept: ContractId UserF1Account
      controller user
      do
        (userF1AccountCid, userF1Account) <- fetchByKey @UserF1Account (betType, user)
        bet <- fetch betCid
        assertMsg "Insufficient balance" $ userF1Account.balance >= bet.amount
        archive betCid
        
        f1BetCid <- create F1Bet with
          issuer = bet.issuer
          user = bet.user
          betType = bet.betType
          racer = bet.racer
          trackInfo = bet.trackInfo
          status = Placed
          odds = bet.odds
          amount = bet.amount
        
        exercise userF1AccountCid F1_AddBet with 
          f1BetCid = f1BetCid
          newBalance = userF1Account.balance - bet.amount

        
    
    choice F1BetProposal_Reject: ()
      controller user
      do
        archive betCid
        return ()
    choice F1BetProposal_Cancel: ()
      controller betType.issuer
      do
        archive betCid
        return ()


template UserF1Account
  with 
    betType: F1BetType
    user: Party
    bets: [ContractId F1Bet]
    balance: Decimal

  where
    signatory user, betType.issuer

    key (betType, user): (F1BetType, Party) --key has to have atleast one party
    maintainer key._1.issuer --1-1 relationship b/w asset and account

    nonconsuming choice F1_InviteNewUser: ContractId UserF1AccountProposal
      with
        recipient: Party
      
      controller betType.issuer
      do
        create UserF1AccountProposal with
          account = this
          recipient 

    choice F1_AddBalance: ContractId UserF1Account
      with
        additionalBalance: Decimal
      
      controller betType.issuer
      do
        assertMsg "Additional balance must be positive" $ additionalBalance > 0.0

        create this with
          balance = balance + additionalBalance
    
    choice F1_AddBet: ContractId UserF1Account
      with
        f1BetCid: ContractId F1Bet
        newBalance: Decimal
      
      controller betType.issuer
      do
        create this with
          bets = bets ++ [f1BetCid]
          balance = newBalance


template UserF1AccountProposal
  with
    account: UserF1Account
    recipient: Party
  
  where
    signatory account.betType.issuer
    observer recipient

    choice UserF1AccountProposal_Accept: ContractId UserF1Account 
      controller recipient
      do
        create account with
          user = recipient

    choice UserF1AccountProposal_Reject: ()
      controller recipient
      do
        return ()

    choice UserF1AccountProposal_Cancel: ()
      controller account.betType.issuer
      do
        return ()

template Winnings
    with
      account: UserF1Account
      accountCid: ContractId UserF1Account
      oldBetCid: ContractId F1Bet
      newBetCid: ContractId F1Bet
      recipient: Party
      winnings: Decimal
    
    where 
      signatory account.betType.issuer
      observer recipient
      
      choice Winnings_Accept: ContractId UserF1Account
        controller recipient
        do
          account <- fetch accountCid
          archive accountCid
          let
            filtered = filter (\x -> x/= oldBetCid) account.bets
          create account with
            balance = account.balance + winnings
            bets = filtered <> [newBetCid]
