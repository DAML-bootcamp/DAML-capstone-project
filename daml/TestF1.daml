module TestF1 where

import Daml.Script
import F1TestSetup
import F1UserBetting
import F1Scheduling
import SetupParties
import SchedulingData
import DA.List 

-- 1. Happy Path: User Account Proposal Accept
testF1UserAccountProposalAccept : Script ()
testF1UserAccountProposalAccept = script do
    tp@TestParties{..} <- setupTestParties
    f1UserBAccountProposalCid <- submit house do
        exerciseCmd f1HouseAccountCid F1_InviteNewUser with
            recipient = userB
    
    f1UserBAccountCid <- submit userB do
        exerciseCmd f1UserBAccountProposalCid UserF1AccountProposal_Accept

    return ()

-- 2. Happy Path: User Account Proposal Reject
testF1UserAccountProposalReject : Script ()
testF1UserAccountProposalReject = script do
    tp@TestParties{..} <- setupTestParties
    f1UserBAccountProposalCid <- submit house do
        exerciseCmd f1HouseAccountCid F1_InviteNewUser with
            recipient = userB
    
    f1UserBAccountCid <- submit userB do
        exerciseCmd f1UserBAccountProposalCid UserF1AccountProposal_Reject

    return ()

-- 3. Happy Path: User Account Proposal Cancel
testF1UserAccountProposalCancel : Script ()
testF1UserAccountProposalCancel = script do
    tp@TestParties{..} <- setupTestParties
    f1UserBAccountProposalCid <- submit house do
        exerciseCmd f1HouseAccountCid F1_InviteNewUser with
            recipient = userB
    
    f1UserBAccountCid <- submit house do
        exerciseCmd f1UserBAccountProposalCid UserF1AccountProposal_Cancel

    return ()

-- 4. Happy Path: Cancel Bet
testCancelF1BetProposal = script do
    tp@TestParties{..} <- setupTestParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Cancel Bet Proposal
    submit house do
        exerciseCmd f1BetProposalCid F1BetProposal_Cancel
    
    return ()

-- 5. Happy Path: Reject Bet
testRejectF1BetProposal : Script ()
testRejectF1BetProposal = script do
    tp@TestParties{..} <- setupTestParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Reject Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Reject
    
    return ()

-- 6. Happy Path: Create Bet, Accept Proposal
testAcceptF1BetProposal = script do
    tp@TestParties{..} <- setupTestParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept
    
    return ()

-- 7. Happy Path: Create Bet, Create Race, Add User to Race, Close Bet -- Loss
testCloseBet = script do
    tp@TestParties{..} <- setupTestParties
    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    tracks@TestTrackInfos{..}<- setupTestTrackInfo
    racers@TestRacers{..}<- setupTestRacers

    -- Create Race
    monacoRaceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "In Progress"

    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept

    -- Add User to Race
    newMonacoRaceCid <- submit house do
        exerciseCmd monacoRaceCid Race_AddUser with
            user = userA

    -- Update Race Status to Finished
    submit house do
        exerciseCmd newMonacoRaceCid UpdateRaceStatus with
            newStatus = "Finished"

    -- Accept Winnings
    winnings <- queryFilter @Winnings userA (\winnings -> winnings.recipient == userA)
    submit userA do
        let
            (winningsCids, winningsPayloads) = unzip winnings
            winningCid = head winningsCids
        exerciseCmd winningCid Winnings_Accept

-- 8. Happy Path: Create Bet, Create Race, Add User to Race, Close Bet -- Win
testCloseBetWin = script do
    tp@TestParties{..} <- setupTestParties
    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    tracks@TestTrackInfos{..}<- setupTestTrackInfo
    racers@TestRacers{..}<- setupTestRacers

    -- Create Race
    monacoRaceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "In Progress"

    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = verstappen
            trackInfo = monaco
            status = Open
            odds = 2.8
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept

    -- Add User to Race
    newMonacoRaceCid <- submit house do
        exerciseCmd monacoRaceCid Race_AddUser with
            user = userA

    -- Update Race Status to Finished
    submit house do
        exerciseCmd newMonacoRaceCid UpdateRaceStatus with
            newStatus = "Finished"

    -- Accept Winnings
    winnings <- queryFilter @Winnings userA (\winnings -> winnings.recipient == userA)
    submit userA do
        let
            (winningsCids, winningsPayloads) = unzip winnings
            winningCid = head winningsCids
        exerciseCmd winningCid Winnings_Accept

-- 9. Happy Path: Create Race
testCreateRace = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards

    submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = leaderboards._3
            status = "In Progress"

    return ()

-- 10. Happy Path: Create Race and Add User
testRaceAddUser = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards

    raceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = leaderboards._3
            status = "In Progress"

    submit house do
        exerciseCmd raceCid Race_AddUser with
            user = userA

    return ()

-- 11. Happy Path: Update Race Status
testUpdateRaceStatus = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards

    raceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = leaderboards._3
            status = "In Progress"

    submit house do
        exerciseCmd raceCid UpdateRaceStatus with
            newStatus = "Finished"
    return ()

-- 12. Happy Path: Update Leaderboard Position
testUpdateLeaderboardPosition = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards
    positions <- setupRacerPositions
    let
        reversed = reverse positions
    raceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = leaderboards._3
            status = "In Progress"

    submit house do
        exerciseCmd raceCid UpdateLeaderboardPosition with
            racerPositions = reversed

    return ()

-- 13. Happy Path: Create Season
testCreateSeason = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards
    getRaces <- setupTestRaces
    getRacers@TestRacers{..} <- setupTestRacers

    seasonCid <- submit house do
        createCmd Season with
            house
            users = [userA]
            year = 2024
            races = [getRaces._2]
            racers = [verstappen, perez, leclerc, sainz, hamilton, russell, norris, piastri]
            championshipStandings = leaderboards._4
            status = "Upcoming"

    return ()

-- 14. Happy path: Add User to Season
testSeasonAddUser = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards
    getRaces <- setupTestRaces
    getRacers@TestRacers{..} <- setupTestRacers

    seasonCid <- submit house do
        createCmd Season with
            house
            users = [userA]
            year = 2024
            races = [getRaces._2]
            racers = [verstappen, perez, leclerc, sainz, hamilton, russell, norris, piastri]
            championshipStandings = leaderboards._4
            status = "Upcoming"
    submit house do
        exerciseCmd seasonCid Season_AddUser with
            user = userB
    return ()

-- 15. Happy Path: Season Add Racer
testSeasonAddRacer = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards
    getRaces <- setupTestRaces
    getRacers@TestRacers{..} <- setupTestRacers
    getTeams@TestTeams{..} <- setupTeams

    seasonCid <- submit house do
        createCmd Season with
            house
            users = [userA]
            year = 2024
            races = [getRaces._2]
            racers = [verstappen]
            championshipStandings = getRaces._4
            status = "Upcoming"
    submit house do
        exerciseCmd seasonCid AddRacer with
            newRacer = perez
    return ()

-- 16. Happy Path: Season Update Championship Position
testSeasonUpdateChampionshipPosition = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards
    getRaces <- setupTestRaces
    getRacers@TestRacers{..} <- setupTestRacers
    getTeams@TestTeams{..} <- setupTeams

    seasonCid <- submit house do
        createCmd Season with
            house
            users = [userA]
            year = 2024
            races = [getRaces._2]
            racers = [verstappen, perez, leclerc, sainz, hamilton, russell, norris, piastri]
            championshipStandings = getRaces._4
            status = "Upcoming"
    submit house do
        exerciseCmd seasonCid UpdateChampionshipPosition with
            racerPos = RacerPosition with
                racer = verstappen
                position = 12
    return ()

-- 17. Happy Path: Update Season Status
testUpdateSeasonStatus = script do
    tp@TestParties{..} <- setupTestParties
    getRacers@TestRacers{..} <- setupTestRacers
    getTeams@TestTeams{..} <- setupTeams

    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    (testTrackInfos@TestTrackInfos{..}) <- setupTestTrackInfo

    spaRace <- submit house do
        createCmd Race with
            house = house
            users = usersParty
            trackInfo = spa
            leaderboard = spaLeaderboard
            status = "Upcoming"
    
    monacoRace <- submit house do
        createCmd Race with
            house = house
            users = usersParty
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "Upcoming"
    
    silverstoneRace <- submit house do
        createCmd Race with
            house = house
            users = usersParty
            trackInfo = silverstone
            leaderboard = silverstoneLeaderboard
            status = "Upcoming"

    seasonCid <- submit house do
        createCmd Season with
            house
            users = [userA]
            year = 2024
            races = [spaRace, monacoRace, silverstoneRace]
            racers = [verstappen, perez, leclerc, sainz, hamilton, russell, norris, piastri]
            championshipStandings = championshipLeaderboard
            status = "Upcoming"

    submit house do
        exerciseCmd seasonCid UpdateSeasonStatus with
            newStatus = "In Progress"

-- 1. Unhappy Path: User Tries to Close Bet
testCloseBetFail = script do
    tp@TestParties{..} <- setupTestParties
    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    tracks@TestTrackInfos{..}<- setupTestTrackInfo
    racers@TestRacers{..}<- setupTestRacers

    -- Create Race
    monacoRaceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "In Progress"

    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = verstappen
            trackInfo = monaco
            status = Open
            odds = 2.8
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept
    
    response <- query @UserF1Account userA
    let
        (cids, payloads) = unzip response
        accountPayload = head payloads
        bCid = head accountPayload.bets

    submitMustFail userA do 
        exerciseCmd bCid F1Bet_CloseBet_System with
            raceWinner = verstappen


-- 2. Unhappy Path: User Tries to Update Race Status
testUpdateRaceStatusFail = script do
    tp@TestParties{..} <- setupTestParties
    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    tracks@TestTrackInfos{..}<- setupTestTrackInfo
    racers@TestRacers{..}<- setupTestRacers

    -- Create Race
    monacoRaceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "In Progress"

    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = verstappen
            trackInfo = monaco
            status = Open
            odds = 2.8
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept

    -- Add User to Race
    newMonacoRaceCid <- submit house do
        exerciseCmd monacoRaceCid Race_AddUser with
            user = userA

    -- Update Race Status to Finished
    submitMustFail userA do
        exerciseCmd newMonacoRaceCid UpdateRaceStatus with
            newStatus = "Finished"

-- 3. Unhappy Path: Insufficient Balance
testInsufficientBalance = script do
    tp@TestParties{..} <- setupTestParties
    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    tracks@TestTrackInfos{..}<- setupTestTrackInfo
    racers@TestRacers{..}<- setupTestRacers

    -- Create Race
    monacoRaceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "In Progress"

    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = verstappen
            trackInfo = monaco
            status = Open
            odds = 2.8
            amount = 105.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submitMustFail userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept

-- 4. Unhappy Path: Non Permissible Status Update
testNonPermissableStatus = script do
    tp@TestParties{..} <- setupTestParties
    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    tracks@TestTrackInfos{..}<- setupTestTrackInfo
    racers@TestRacers{..}<- setupTestRacers

    -- Create Race
    monacoRaceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "In Progress"

    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = verstappen
            trackInfo = monaco
            status = Open
            odds = 2.8
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept

    -- Add User to Race
    newMonacoRaceCid <- submit house do
        exerciseCmd monacoRaceCid Race_AddUser with
            user = userA

    -- Update Race Status to Finished
    submitMustFail house do
        exerciseCmd newMonacoRaceCid UpdateRaceStatus with
            newStatus = "Delay"

-- 5. Unhappy Path: User Tries to Update Race Positions
testUpdateLeaderboardPositionFail = script do
    tp@TestParties{..} <- setupTestParties
    tracks@TestTrackInfos{..} <- setupTestTrackInfo
    leaderboards <- setupRaceLeaderboards
    positions <- setupRacerPositions
    let
        reversed = reverse positions
    raceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = leaderboards._3
            status = "In Progress"

    submitMustFail userA do
        exerciseCmd raceCid UpdateLeaderboardPosition with
            racerPositions = reversed

    return ()