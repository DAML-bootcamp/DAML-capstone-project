module TestF1 where

import Daml.Script
import F1TestSetup
import F1UserBetting

data TestParties = TestParties
    with
        house: Party
        userA: Party
        betType: F1BetType
        f1UserAccountCid: ContractId UserF1Account

setupParties : Script TestParties
setupParties = script do
    house <- allocateParty "House"
    userA <- allocateParty "UserA"
    let 
        betType = F1BetType with
            issuer = house
    
    f1HouseAccountCid <- submit house do
        createCmd UserF1Account with
            betType
            user = house
            bets = []
            balance = 100.0
    
    f1UserAccountProposalCid <- submit house do
        exerciseCmd f1HouseAccountCid F1_InviteNewUser with
            recipient = userA
    
    f1UserAccountCid <- submit userA do
        exerciseCmd f1UserAccountProposalCid UserF1AccountProposal_Accept

    let
        tp = TestParties with ..
    return tp


-- 1. Happy Path: User Account Creation

-- createUserF1Account : Script (ContractId UserF1Account)
-- createUserF1Account = script do
--     tp@TestParties{..} <- setupParties

--     f1UserAccountCid <- submitMulti [userA, betType.issuer] [] do
--         createCmd UserF1Account with
--             betType
--             user = userA
--             bets = []
--             balance = 100.0

--     return f1UserAccountCid

-- 2. Happy Path: Cancel Bet
testCancelF1BetProposal = script do
    tp@TestParties{..} <- setupParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
    
    -- Get Bet Payload
    Some betPayload <- queryContractId userA betCid
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            bet = betPayload
            user = userA
    
    -- Cancel Bet Proposal
    submit house do
        exerciseCmd f1BetProposalCid F1BetProposal_Cancel
    
    return ()


-- 3. Happy Path: Reject Bet
testRejectF1BetProposal = script do
    tp@TestParties{..} <- setupParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
    
    -- Get Bet Payload
    Some betPayload <- queryContractId userA betCid
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            bet = betPayload
            user = userA
    
    -- Reject Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Reject
    
    return ()

-- 4. Happy Path: Create Bet, Accept Proposal
testAcceptF1BetProposal = script do
    tp@TestParties{..} <- setupParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
    
    -- Get Bet Payload
    Some betPayload <- queryContractId userA betCid
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            bet = betPayload
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept
    
    return ()