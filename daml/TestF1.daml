module TestF1 where

import Daml.Script
import F1TestSetup
import F1UserBetting
import F1Scheduling
import DA.List 

data TestParties = TestParties
    with
        house: Party
        userA: Party
        userB: Party
        betType: F1BetType
        f1UserAAccountCid: ContractId UserF1Account
        f1HouseAccountCid: ContractId UserF1Account

setupParties : Script TestParties
setupParties = script do
    house <- allocateParty "House"
    userA <- allocateParty "UserA"
    userB <- allocateParty "UserB"
    let 
        betType = F1BetType with
            issuer = house
    
    f1HouseAccountCid <- submit house do
        createCmd UserF1Account with
            betType
            user = house
            bets = []
            balance = 100.0

    f1UserAAccountProposalCid <- submit house do
        exerciseCmd f1HouseAccountCid F1_InviteNewUser with
            recipient = userA
    
    f1UserAAccountCid <- submit userA do
        exerciseCmd f1UserAAccountProposalCid UserF1AccountProposal_Accept
    let
        tp = TestParties with ..
    return tp


-- 1. Happy Path: User Account Proposal Accept

testF1UserAccountProposalAccept : Script ()
testF1UserAccountProposalAccept = script do
    tp@TestParties{..} <- setupParties
    f1UserBAccountProposalCid <- submit house do
        exerciseCmd f1HouseAccountCid F1_InviteNewUser with
            recipient = userB
    
    f1UserBAccountCid <- submit userB do
        exerciseCmd f1UserBAccountProposalCid UserF1AccountProposal_Accept

    return ()

-- 2. Happy Path: User Account Proposal Reject

testF1UserAccountProposalReject : Script ()
testF1UserAccountProposalReject = script do
    tp@TestParties{..} <- setupParties
    f1UserBAccountProposalCid <- submit house do
        exerciseCmd f1HouseAccountCid F1_InviteNewUser with
            recipient = userB
    
    f1UserBAccountCid <- submit userB do
        exerciseCmd f1UserBAccountProposalCid UserF1AccountProposal_Reject

    return ()

-- 3. Happy Path: User Account Proposal Cancel

testF1UserAccountProposalCancel : Script ()
testF1UserAccountProposalCancel = script do
    tp@TestParties{..} <- setupParties
    f1UserBAccountProposalCid <- submit house do
        exerciseCmd f1HouseAccountCid F1_InviteNewUser with
            recipient = userB
    
    f1UserBAccountCid <- submit house do
        exerciseCmd f1UserBAccountProposalCid UserF1AccountProposal_Cancel

    return ()


-- 4. Happy Path: Cancel Bet
testCancelF1BetProposal = script do
    tp@TestParties{..} <- setupParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Cancel Bet Proposal
    submit house do
        exerciseCmd f1BetProposalCid F1BetProposal_Cancel
    
    return ()


-- 5. Happy Path: Reject Bet
testRejectF1BetProposal : Script ()
testRejectF1BetProposal = script do
    tp@TestParties{..} <- setupParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Reject Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Reject
    
    return ()

-- 6. Happy Path: Create Bet, Accept Proposal
testAcceptF1BetProposal = script do
    tp@TestParties{..} <- setupParties
    racers@TestRacers{..} <- setupTestRacers
    tracks@TestTrackInfos{..} <- setupTestTrackInfo


    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept
    
    return ()

-- 7. Happy Path: Create Bet, Create Race, Add User to Race, Close Bet -- Loss
testCloseBet = script do
    tp@TestParties{..} <- setupParties
    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    tracks@TestTrackInfos{..}<- setupTestTrackInfo
    racers@TestRacers{..}<- setupTestRacers

    -- Create Race
    monacoRaceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "In Progress"

    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = perez
            trackInfo = monaco
            status = Open
            odds = 0.1
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept

    -- Add User to Race
    newMonacoRaceCid <- submit house do
        exerciseCmd monacoRaceCid Race_AddUser with
            user = userA

    -- Update Race Status to Finished
    submit house do
        exerciseCmd newMonacoRaceCid UpdateRaceStatus with
            newStatus = "Finished"

    -- Accept Winnings
    winnings <- queryFilter @Winnings userA (\winnings -> winnings.recipient == userA)
    submit userA do
        let
            (winningsCids, winningsPayloads) = unzip winnings
            winningCid = head winningsCids
        exerciseCmd winningCid Winnings_Accept


-- 8. Happy Path: Create Bet, Create Race, Add User to Race, Close Bet -- Win
testCloseBetWin = script do
    tp@TestParties{..} <- setupParties
    (spaLeaderboard, monacoLeaderboard, silverstoneLeaderboard, championshipLeaderboard) <- setupRaceLeaderboards
    tracks@TestTrackInfos{..}<- setupTestTrackInfo
    racers@TestRacers{..}<- setupTestRacers

    -- Create Race
    monacoRaceCid <- submit house do
        createCmd Race with
            house
            users = []
            trackInfo = monaco
            leaderboard = monacoLeaderboard
            status = "In Progress"

    -- Create Bet
    betCid <- submit house do
        createCmd F1Bet with
            issuer = house
            user = userA
            betType
            racer = verstappen
            trackInfo = monaco
            status = Open
            odds = 2.8
            amount = 5.0
    
        
    -- Create Bet Proposal
    f1BetProposalCid <- submit house do
        createCmd F1BetProposal with
            betCid
            betType
            user = userA
    
    -- Accept Bet Proposal
    submit userA do
        exerciseCmd f1BetProposalCid F1BetProposal_Accept

    -- Add User to Race
    newMonacoRaceCid <- submit house do
        exerciseCmd monacoRaceCid Race_AddUser with
            user = userA

    -- Update Race Status to Finished
    submit house do
        exerciseCmd newMonacoRaceCid UpdateRaceStatus with
            newStatus = "Finished"

    -- Accept Winnings
    winnings <- queryFilter @Winnings userA (\winnings -> winnings.recipient == userA)
    submit userA do
        let
            (winningsCids, winningsPayloads) = unzip winnings
            winningCid = head winningsCids
        exerciseCmd winningCid Winnings_Accept
    